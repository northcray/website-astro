---
export interface EventItem {
  key: string;
  href?: string;
  label: string;
  subtitle?: string;
  date: string;
}

export interface Props {
  items: EventItem[];
  grid?: number;
  class?: string;
}

const { items, grid = 3, class: className = "" } = Astro.props;

const gridClass = grid
  ? `md:grid md:grid-cols-2 lg:grid-cols-${grid} gap-10`
  : "";

function formatEventDate(dateString: string) {
  const dateParts = new Intl.DateTimeFormat("en-GB", {
    dateStyle: "full",
  }).formatToParts(new Date(dateString));

  const weekday = dateParts.find((part) => part.type === "weekday")?.value;
  const month = dateParts.find((part) => part.type === "month")?.value;
  const day = dateParts.find((part) => part.type === "day")?.value;

  return { weekday, month, day };
}
---

<ul class:list={[`list-none p-0 m-0`, gridClass, className]}>
  {
    items?.map((item) => {
      const { weekday, month, day } = formatEventDate(item.date);

      return (
        <li class="py-4 flex gap-2 flex-col border-b-gray-300 dark:border-b-gray-700 border-b border-solid border-0">
          <article class="flex flex-row bg-gray-100 dark:bg-gray-900 rounded-lg">
            <div class="text-base flex flex-col items-center justify-center bg-gray-200 dark:bg-gray-900 rounded-lg p-4 leading-none">
              <div>{weekday}</div>
              <div class="text-7xl font-bold">{day}</div>
              <div>{month}</div>
            </div>
            <div class="flex flex-col justify-between gap-2 p-4">
              <div class="text-lg font-semibold">
                {item.href ? (
                  <a href={item.href} class="nc-link nc-focus">
                    {item.label}
                  </a>
                ) : (
                  item.label
                )}
              </div>
              <div class="text-xs line-clamp-3">{item.subtitle}</div>
            </div>
          </article>
        </li>
      );
    })
  }
</ul>
