---
import Breadcrumbs from "./Breadcrumbs.astro";
import Container from "./Container.astro";
import Meta from "./Meta.astro";

export interface Props {
  titleId?: string;
  title?: string;
  subtitle?: string;
  tabs?: { label: string; href: string }[];
  meta?: { label: string; value: string }[];
  breadcrumbs?: { label: string; href: string; active?: boolean }[];
}

const { titleId, title, subtitle, tabs, breadcrumbs, meta } = Astro.props;

const noTitles = !title && !subtitle;
const hasSecondarySlot = Astro.slots.has("secondary");
const hasInteractionSlot = Astro.slots.has("interaction");
---

<div class:list={["bg2", { "py-6": !noTitles }]}>
  {
    breadcrumbs && (
      <Container classes={noTitles ? "py-4" : "py-0"}>
        <Breadcrumbs items={breadcrumbs} />
      </Container>
    )
  }
  {
    (title || subtitle) && (
      <Container>
        <div class="m-0 py-6 md:py-12 relative flex">
          {hasSecondarySlot && (
            <div class="top-0 left-0 right-0 bottom-0 absolute z-0">
              <slot name="secondary" />
            </div>
          )}
          <div>
            {title && (
              <h1
                class="lg:text-6xl"
                transition:name={titleId || "pageHeaderTitle"}
              >
                {title}
              </h1>
            )}
            {subtitle && (
              <div
                class="text-2xl lg:text-3xl nc-display opacity-70"
                transition:name="pageHeaderSubtitle"
              >
                {subtitle}
              </div>
            )}
          </div>
        </div>
      </Container>
    )
  }
  {
    hasInteractionSlot && (
      <Container>
        <div class="flex items-center gap-4">
          <slot name="interaction" />
        </div>
      </Container>
    )
  }
  {
    meta && (
      <Container>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 grid-rows-1 gap-4 max-w-(--breakpoint-lg)">
          {meta.map((item) => (
            <Meta {...item} />
          ))}
        </div>
      </Container>
    )
  }
  {
    tabs && (
      <Container>
        <ul class="nc-page-tabs pt-4">
          {tabs.map((tab) => (
            <li>
              <a data-tablink href={tab.href} class="nc-focus-outline">
                {tab.label}
              </a>
            </li>
          ))}
        </ul>
      </Container>
    )
  }
</div>

<script is:inline data-astro-rerun>
  function updateActiveTabLinks() {
    const current = window.location.pathname;
    const tabLinks = document.querySelectorAll("[data-tablink]");

    const classes = ["active"];

    tabLinks.forEach((link) => {
      const href = link.getAttribute("href");
      if (current.startsWith(href)) {
        link.classList.add(...classes);
      } else {
        link.classList.remove(...classes);
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    updateActiveTabLinks();
  });
</script>
