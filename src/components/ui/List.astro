---
import { getImageSrc } from "@lib/utils";

export interface ItemProps {
  key: string;
  href?: string;
  label: string;
  subtitle?: string;
  image?: string;
  tag?: {
    label: string;
  };
}

export interface Props {
  items: ItemProps[];
  grid?: number;
  imageKey?: string;
  vertical?: boolean;
  class?: string;
}

const {
  items,
  imageKey,
  grid = 4,
  vertical = false,
  class: className = "",
} = Astro.props;

const cols = [
  `lg:grid-cols-0`,
  `lg:grid-cols-1`,
  `lg:grid-cols-2`,
  `lg:grid-cols-3`,
  `lg:grid-cols-4`,
  `lg:grid-cols-5`,
  `lg:grid-cols-6`,
];

const gridClass = grid
  ? `md:grid md:grid-cols-2 ${cols[grid]} gap-0 -mx-4`
  : "";
---

<ul class={`list-none p-0 m-0 ${gridClass} ${className}`}>
  {
    items?.map(async (item) => {
      const imageEl = item.image ? (
        <img
          transition:name={item.image}
          src={getImageSrc(item.image, imageKey)}
          alt="Image"
        />
      ) : null;

      const labelEl = (
        <div
          class:list={[
            "text-lg font-semibold flex-grow flex",
            { "nc-focus-outline": item.href },
          ]}
        >
          {item.label}
        </div>
      );

      const subtitleEl = item.subtitle ? (
        <div class="text-xs line-clamp-2 opacity-90 text-black dark:text-white">
          {item.subtitle}
        </div>
      ) : null;

      const tagEl = item.tag ? (
        <div class="nc-tag w-min whitespace-nowrap">{item.tag.label}</div>
      ) : null;

      if (vertical) {
        return (
          <li class="flex flex-col border-b-gray-100 dark:border-b-gray-700 border-b border-solid border-0">
            {item.href ? (
              <a
                href={item.href}
                class="p-4 flex flex-col gap-2 h-full nc-focus-outline hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                {imageEl}
                {labelEl}
                {subtitleEl}
                {tagEl}
              </a>
            ) : (
              <div class="p-4 flex flex-col gap-2 h-full">
                {imageEl}
                {labelEl}
                {tagEl}
              </div>
            )}
          </li>
        );
      }

      const content = imageEl ? (
        <>
          <div class="sm:basis-1/3">{imageEl}</div>
          <div class="sm:basis-2/3 gap-2 flex flex-col">
            {labelEl}
            {subtitleEl}
            {tagEl}
          </div>
        </>
      ) : (
        <div class="gap-2 flex flex-col">
          {labelEl}
          {subtitleEl}
          {tagEl}
        </div>
      );

      return (
        <li class="border-b-gray-100 dark:border-b-gray-700 border-b border-solid border-0">
          {item.href ? (
            <a
              href={item.href}
              class="flex flex-col sm:flex-row gap-4 p-4 h-full nc-focus-outline hover:bg-gray-100 dark:hover:bg-gray-800"
            >
              {content}
            </a>
          ) : (
            <div class="p-4 h-full">{content}</div>
          )}
        </li>
      );
    })
  }
</ul>
