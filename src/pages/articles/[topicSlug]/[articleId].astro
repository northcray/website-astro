---
import { getImageSrc } from "../../../lib/utils";
export const prerender = true;
import Section from "@ui/Section.astro";
import MainLayout from "@layouts/MainLayout.astro";
import PageHeader from "@ui/PageHeader.astro";
import Container from "@ui/Container.astro";
import Markdown from "@ui/Markdown.astro";
import { createDirectusClient } from "@lib/directus";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import { readItems } from "@directus/sdk";
import SectionHeader from "../../../components/ui/SectionHeader.astro";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const articles = await directus.request(
    readItems("articles", {
      fields: [
        "id",
        "title",
        "image",
        "content",
        "summary",
        "topic.*",
        "first_published_at",
        "tags",
        "blocks.collection" as any,
        "blocks.item.*" as any,
        "belongs_to.*",
      ],
      filter: {
        status: { _eq: "published" },
      },
    }),
  );

  const articlesById = articles.reduce((acc, article) => {
    acc[article.id] = article;
    return acc;
  }, {});

  return articles.map((article) => {
    const seriesArticles = [];

    if (article.belongs_to) {
      article.belongs_to.articles.forEach((id: number) => {
        if (articlesById[id]) {
          seriesArticles.push(articlesById[id]);
        }
      });
    }

    return {
      params: { articleId: article.id, topicSlug: article.topic.slug },
      props: { article, seriesArticles },
    };
  });
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { articleId, topicSlug } = Astro.params as Params;
const { article, seriesArticles } = Astro.props as Props;

const [t1, ...tRest] = article.title.split(" - ");
---

<MainLayout>
  <PageHeader
    titleId={`article-${articleId}`}
    title={t1}
    subtitle={tRest.join(" - ")}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "Articles", href: "/articles" },
      {
        label: article.topic.title,
        href: `/articles/${topicSlug}`,
      },
      {
        label: "Article",
        href: `/articles/${topicSlug}/${articleId}`,
        active: true,
      },
    ]}
    meta={[
      {
        label: "Published At",
        value: new Date(article.first_published_at).toDateString(),
      },
      { label: "Series", value: article.belongs_to?.title || "None" },
      { label: "Topic", value: article.topic.title },
      { label: "Tags", value: article.tags?.join(", ") || "None" },
    ]}
  />

  {
    article.summary && (
      <>
        <div
          style={`background-image: url(${getImageSrc(article.image, "post-image-main") || `/27171_032.jpg`})`}
          class="bg-center bg-cover"
          transition:name={article.image}
        >
          <div class="dark:backdrop-brightness-100 backdrop-brightness-80 backdrop-contrast-40 dark:backdrop-contrast-80 backdrop-grayscale-50 backdrop-blur-[1px] bg-white/0 text-white text-shadow-xs dark:bg-black/70">
            <Container classes="font-display text-xl/8 max-w-prose mx-auto py-10 md:py-20">
              {article.summary}
            </Container>
          </div>
        </div>
      </>
    )
  }

  <Container>
    <Section
      class="hidden max-w-prose mx-auto font-display text-justify text-2xl/9 text-gray-600 dark:text-gray-300"
    >
      {article.summary}
    </Section>
    <Section class="max-w-prose mx-auto">
      <Markdown children={article.content} />
    </Section>
  </Container>

  {
    article.belongs_to && (
      <div class="bg-gray-50 dark:bg-cinder-700 border-t border-gray-100 dark:border-cinder-600">
        <Container>
          <Section class="max-w-prose mx-auto">
            <SectionHeader>
              <div class="flex gap-2 items-center">
                <span>Series - {article.belongs_to.title}</span>
              </div>
            </SectionHeader>
            <p class="font-light mt-6 mb-8 max-w-prose">
              {article.belongs_to.description}
            </p>
            <ul>
              {seriesArticles.map((a, ind) => (
                <li class="first-of-type:pt-0 last-of-type:pb-0 last-of-type:border-b-0 py-2 border-b border-gray-200 dark:border-cinder-200 flex gap-2 items-center">
                  <div
                    class:list={[
                      "text-2xl font-light rounded-full min-w-10 min-h-10 w-10 h-10 items-center justify-center flex",
                      { "bg-sky-800 text-white": a.id === article.id },
                      {
                        "bg-gray-200 dark:bg-cinder-500 text-gray-500 dark:text-gray-400":
                          a.id !== article.id,
                      },
                    ]}
                  >
                    {ind + 1}
                  </div>
                  <img
                    alt={a.title}
                    src={getImageSrc(a.image, "tiny-thumbnail")}
                    class="w-[40px] rounded-sm"
                  />
                  <div class="flex flex-col gap-1">
                    <div class="flex gap-1 items-center line-clamp-1">
                      {a.id === article.id ? (
                        <>
                          <span>{a.title}</span>
                          <span class="bg-gray-200 dark:bg-cinder-400 py-0.5 px-1.5 rounded text-xs text-nowrap">
                            Just read
                          </span>
                        </>
                      ) : (
                        <a
                          class:list={[
                            "nc-link nc-focus",
                            { "font-bold": a.id === article.id },
                          ]}
                          href={`/articles/${a.topic.slug}/${a.id}`}
                        >
                          {a.title}
                        </a>
                      )}
                    </div>
                    <time class="text-xs text-gray-500 dark:text-gray-400">
                      {new Date(a.first_published_at).toDateString()}
                    </time>
                  </div>
                </li>
              ))}
            </ul>
          </Section>
          <Section />
        </Container>
      </div>
    )
  }

  {
    article.blocks.map((block: any) => (
      <Container key={block.item.id} class="my-8">
        {block.collection === "blocks_content" && (
          <Markdown children={block.item.content} />
        )}
      </Container>
    ))
  }
</MainLayout>
