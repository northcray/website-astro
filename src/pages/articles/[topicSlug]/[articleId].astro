---
import { getImageSrc } from "../../../lib/utils";
export const prerender = true;
import Section from "@ui/Section.astro";
import MainLayout from "@layouts/MainLayout.astro";
import PageHeader from "@ui/PageHeader.astro";
import Container from "@ui/Container.astro";
import Markdown from "@ui/Markdown.astro";
import { createDirectusClient } from "@lib/directus";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import { readItems } from "@directus/sdk";
import PropertyList from "../../../components/ui/PropertyList.astro";
import ArticleList from "../../../components/ui/ArticleList.astro";
import SectionHeader from "../../../components/ui/SectionHeader.astro";
import ImageBlock from "../../../components/ui/ImageBlock.astro";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const articles = await directus.request(
    readItems("articles", {
      fields: [
        "id",
        "title",
        "image",
        "content",
        "summary",
        "topic.*",
        "first_published_at",
        "tags",
        "blocks.collection" as any,
        "blocks.item.*" as any,
        "belongs_to.*",
      ],
      filter: {
        status: { _eq: "published" },
      },
    }),
  );

  const articlesById = articles.reduce((acc, article) => {
    acc[article.id] = article;
    return acc;
  }, {});

  return articles.map((article) => {
    const seriesArticles = [];

    if (article.belongs_to) {
      article.belongs_to.articles.forEach((id: number) => {
        if (articlesById[id]) {
          seriesArticles.push(articlesById[id]);
        }
      });
    }

    return {
      params: { articleId: article.id, topicSlug: article.topic.slug },
      props: { article, seriesArticles },
    };
  });
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { articleId, topicSlug } = Astro.params as Params;
const { article, seriesArticles } = Astro.props as Props;

console.log(article);
const [t1, ...tRest] = article.title.split(" - ");
---

<MainLayout>
  <PageHeader
    titleId={`article-${articleId}`}
    title={t1}
    subtitle={tRest.join(" - ")}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "Articles", href: "/articles" },
      {
        label: article.topic.title,
        href: `/articles/${topicSlug}`,
      },
      {
        label: "Article",
        href: `/articles/${topicSlug}/${articleId}`,
        active: true,
      },
    ]}
    meta={[
      {
        label: "Published At",
        value: new Date(article.first_published_at).toDateString(),
      },
      { label: "Series", value: article.belongs_to?.title || "None" },
      { label: "Topic", value: article.topic.title },
      { label: "Tags", value: article.tags?.join(", ") || "None" },
    ]}
  />

  <div
    style={`background-image: url(${getImageSrc(article.image, "post-image-main") || `/27171_032.jpg`})`}
    class="bg-center bg-cover"
    transition:name={article.image}
  >
    <div
      class="dark:backdrop-brightness-40 backdrop-contrast-100 backdrop-grayscale-100 bg-white/90 dark:bg-black/70"
    >
      <p class="font-display text-xl/8 max-w-prose mx-auto py-20 px-4">
        {article.summary}
      </p>
    </div>
  </div>

  <hr />

  <Container classes="my-8 md:grid grid-cols-12 gap-8 relative">
    <aside class="col-span-3 flex flex-col gap-4 mb-10">
      <div class="hidden rounded bg-gray-50 p-2">
        <!--<SectionHeader>In this series</SectionHeader>-->
        <PropertyList
          details={[
            {
              label: "Published At",
              value: new Date(article.first_published_at).toDateString(),
            },
            { label: "Series", value: article.belongs_to?.title || "None" },
            { label: "Topic", value: article.topic?.title },
            { label: "Tags", value: article.tags?.join(", ") || "None" },
          ]}
        />
      </div>
    </aside>
    <article class="lg:col-span-6 md:col-span-9">
      <Markdown children={article.content} />
    </article>
    <div class="lg:col-span-3">
      {
        false && (
          <img
            src={getImageSrc(article.image, "post-image-main")}
            alt={article.title}
            width={600}
            height={600}
            class=""
          />
        )
      }
    </div>
  </Container>

  {
    article.belongs_to && (
      <div class="bg-gray-50 border-t border-gray-100">
        <Container>
          <Section>
            <SectionHeader>Others in this series</SectionHeader>
            <p class="my-5">
              This article belongs to the series{" "}
              <a class="nc-link nc-focus">{article.belongs_to.title}</a>.
            </p>
            <ArticleList articles={seriesArticles} grid={4} vertical={true} />
          </Section>
          <Section />
        </Container>
      </div>
    )
  }

  {
    article.blocks.map((block: any) => (
      <Container key={block.item.id} class="my-8">
        {block.collection === "blocks_content" && (
          <Markdown children={block.item.content} />
        )}
      </Container>
    ))
  }
</MainLayout>
