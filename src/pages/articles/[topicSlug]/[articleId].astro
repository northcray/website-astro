---
import { getImageSrc } from "../../../lib/utils";
export const prerender = true;
import Section from "@ui/Section.astro";
import MainLayout from "@layouts/MainLayout.astro";
import PageHeader from "@ui/PageHeader.astro";
import Container from "@ui/Container.astro";
import Markdown from "@ui/Markdown.astro";
import { createDirectusClient } from "@lib/directus";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import { readItems } from "@directus/sdk";
import PropertyList from "../../../components/ui/PropertyList.astro";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const articles = await directus.request(
    readItems("articles", {
      fields: [
        "id",
        "title",
        "image",
        "content",
        "summary",
        "topic.*",
        "first_published_at",
        "tags",
        "blocks.collection" as any,
        "blocks.item.*" as any,
        "belongs_to.*",
      ],
      filter: {
        status: { _eq: "published" },
      },
    }),
  );

  return articles.map((article) => ({
    params: { articleId: article.id, topicSlug: article.topic.slug },
    props: { article },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { articleId, topicSlug } = Astro.params as Params;
const { article } = Astro.props as Props;

console.log(article);
const [t1, ...tRest] = article.title.split(" - ");
---

<MainLayout>
  <PageHeader
    title={t1}
    subtitle={tRest.join(" - ")}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "Articles", href: "/articles" },
      {
        label: article.topic.title,
        href: `/articles/${topicSlug}`,
      },
      {
        label: "Article",
        href: `/articles/${topicSlug}/${articleId}`,
        active: true,
      },
    ]}
  />

  <Container classes="my-24">
    <p class="text-xl opacity-80 max-w-prose mx-auto">
      {article.summary}
    </p>
  </Container>
  <hr />
  <Container classes="my-8 md:grid grid-cols-12 gap-8">
    <aside class="col-span-3 flex flex-col gap-4 mb-10">
      <PropertyList
        details={[
          {
            label: "Published At",
            value: new Date(article.first_published_at).toDateString(),
          },
          { label: "Series", value: article.belongs_to?.title || "None" },
          { label: "Topic", value: article.topic.title },
          { label: "Tags", value: article.tags?.join(", ") || "None" },
        ]}
      />
    </aside>
    <article class="lg:col-span-6 md:col-span-9">
      <Markdown children={article.content} />

      {
        article.belongs_to && (
          <div>
            <hr class="mt-20" />
            <h5 class="mt-5">This article belongs to a series</h5>
            <a class="nc-link nc-focus">{article.belongs_to.title}</a>
          </div>
        )
      }
    </article>
    <div class="lg:col-span-3">
      {
        article.image && (
          <img
            transition:name={article.image}
            src={getImageSrc(article.image, "post-image-main")}
            alt={article.title}
            width={600}
            height={600}
            class=""
          />
        )
      }
    </div>
  </Container>

  {
    article.blocks.map((block: any) => (
      <Container key={block.item.id} class="my-8">
        {block.collection === "blocks_content" && (
          <Markdown children={block.item.content} />
        )}
      </Container>
    ))
  }
  <Section />
</MainLayout>
