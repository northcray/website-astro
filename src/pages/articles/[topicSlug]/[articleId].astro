---
export const prerender = true;
import Section from "@ui/Section.astro";
import { PUBLIC_DIRECTUS_URL } from "astro:env/client";
import MainLayout from "@layouts/MainLayout.astro";
import PageHeader from "@ui/PageHeader.astro";
import Container from "@ui/Container.astro";
import Markdown from "@ui/Markdown.astro";
import { createDirectusClient } from "@lib/directus";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import { readItems } from "@directus/sdk";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const articles = await directus.request(
    readItems("articles", {
      fields: [
        "id",
        "title",
        "image",
        "topic.*",
        "first_published_at",
        "tags",
        "blocks.collection" as any,
        "blocks.item.*" as any,
      ],
    }),
  );

  return articles.map((article) => ({
    params: { articleId: article.id, topicSlug: article.topic.slug },
    props: { article },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { articleId, topicSlug } = Astro.params as Params;
const { article } = Astro.props as Props;
---

<MainLayout>
  <PageHeader
    title={article.title}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "Articles", href: "/articles" },
      {
        label: article.topic.title,
        href: `/articles/${topicSlug}`,
      },
      {
        label: "Article",
        href: `/articles/${topicSlug}/${articleId}`,
        active: true,
      },
    ]}
    meta={[
      {
        label: "Published",
        value: new Date(article.first_published_at).toDateString(),
      },
    ]}
  />

  {
    article.image && (
      <Container classes="my-8">
        <img
          src={`${PUBLIC_DIRECTUS_URL}/assets/${article.image}`}
          alt={article.title}
          width={1000}
          height={500}
          class="h-auto w-auto lg:float-right lg:pl-10"
        />
      </Container>
    )
  }

  {
    article.blocks.map((block: any) => (
      <Container key={block.item.id} class="my-8">
        {block.collection === "blocks_content" && (
          <Markdown children={block.item.content} />
        )}
      </Container>
    ))
  }

  <Container classes="my-10">
    <Markdown>{article.content}</Markdown>
  </Container>

  {
    article.tags && (
      <Container>
        <h5>Tags</h5>
        <ul class="list-none my-10 p-0 m-0 flex gap-2">
          {article.tags?.map((tag: string) => (
            <li>
              <a class="nc-tag nc-link nc-focus">{tag}</a>
            </li>
          ))}
        </ul>
      </Container>
    )
  }
  <Section />
</MainLayout>
