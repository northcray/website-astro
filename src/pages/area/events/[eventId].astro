---
import PropertyList from "../../../components/ui/PropertyList.astro";
export const prerender = true;
import { ExternalLink } from "@lucide/astro";
import { getAllEvents } from "@lib/directus/queries";
import { getImageSrc } from "@lib/utils";
import MainLayout from "@layouts/MainLayout.astro";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import PageHeader from "@ui/PageHeader.astro";
import Container from "@ui/Container.astro";
import Section from "@ui/Section.astro";
import Markdown from "@ui/Markdown.astro";
import SectionHeader from "@ui/SectionHeader.astro";

export async function getStaticPaths() {
  const events = await getAllEvents();

  return events.map((event) => ({
    params: { eventId: event.id },
    props: { event },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { event } = Astro.props as Props;
const { eventId } = Astro.params as Params;

function formatDuration(start: string, end: string) {
  const ms = new Date(end) - new Date(start);
  const mins = Math.floor(ms / 60000);
  const hours = Math.floor(mins / 60);
  const remainingMins = mins % 60;
  return `${hours}h ${remainingMins}mins`;
}

const location = event.location
  .replaceAll("_", " ")
  .split(" ")
  .map((word) => word[0].toUpperCase() + word.slice(1))
  .join(" ");

const duration = formatDuration(event.start, event.end);

const meta = [
  { label: "Start", value: new Date(event.start).toLocaleString("en-GB") },
  { label: "End", value: new Date(event.end).toLocaleString("en-GB") },
  { label: "Duration", value: duration },
  { label: "Category", value: event.category.replaceAll("_", " ") },
];
---

<MainLayout
  seo={{
    title: `Event: ${event.name}`,
    description: "",
  }}
>
  <PageHeader
    titleId={`event-${event.id}`}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "Area and Community", href: "/area" },
      { label: "Events", href: "/area/events" },
    ]}
    title={event.name}
    subtitle={`${location} Event (${duration})`}
  />

  <Container classes="my-8 md:grid grid-cols-12 gap-8 relative">
    <aside class="col-span-3 flex flex-col gap-4 mb-10">
      <div class="rounded bg-gray-50 dark:bg-cinder-700 p-4">
        <PropertyList details={meta} />
      </div>
    </aside>
    <article class="lg:col-span-6 md:col-span-9">
      <Markdown children={event.description} />
    </article>
    <div class="lg:col-span-3">
      {
        event.meeting_place && (
          <div class="mb-4">
            <a
              class="nc-link nc-focus"
              target="_blank"
              href={`https://www.google.com/maps/search/?api=1&query=${event.meeting_place.coordinates[1]}%2C${event.meeting_place.coordinates[0]}`}
            >
              Open Google Maps
              <ExternalLink class="inline ml-1.5" size={16} />
            </a>
          </div>
        )
      }
      {
        event.association_official ? (
          "NCRA"
        ) : event.group ? (
          <a
            href={event.group.website}
            rel="noopener noreferrer"
            target="_blank"
            class="nc-link nc-focus flex flex-col gap-4 items-center rounded bg-gray-50 p-2"
          >
            {event.group?.image && (
              <img
                alt={event.group.name}
                class="w-full"
                src={getImageSrc(event.group.image, "large-thumbnail")}
              />
            )}

            <span>{event.group.name}</span>
          </a>
        ) : (
          "-"
        )
      }
    </div>
  </Container>
</MainLayout>
