---
import Section from "../../components/ui/Section.astro";
export const prerender = true;
import { PUBLIC_DIRECTUS_URL } from "astro:env/client";

import Container from "@ui/Container.astro";
import PageHeader from "@ui/PageHeader.astro";
import Markdown from "@ui/Markdown.astro";
import MainLayout from "@layouts/MainLayout.astro";

import { createDirectusClient } from "@lib/directus";
import { readItems } from "@directus/sdk";
import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import SectionHeader from "../../components/ui/SectionHeader.astro";
import PostList from "../../components/ui/PostList.astro";
import { getImageSrc } from "../../lib/utils";
import Meta from "../../components/ui/Meta.astro";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const posts = await directus.request(
    readItems("posts", {
      fields: ["slug", "date", "type", "title", "content", "topics", "image"],
      sort: ["date"],
    }),
  );

  return posts.map((post: { slug: string }, index, arr) => ({
    params: { slug: post.slug },
    props: { post, next: arr[index + 1], prev: arr[index - 1] },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { slug } = Astro.params as Params;
const { post, next, prev } = Astro.props as Props;

const meta = [
  { label: "Published", value: new Date(post.date).toDateString() },
  { label: "Topics", value: (post?.topics || ["-"]).join(", ") },
];
---

<MainLayout>
  <PageHeader
    titleId={`post-${post.slug}`}
    title={post.title}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "News", href: "/news" },
      {
        label: "Post",
        href: `/news/${slug}`,
        active: true,
      },
    ]}
  />

  <Container classes="lg:grid grid-cols-12 gap-8">
    {
      post.image && (
        <Section class="col-span-4 lg:border-r border-gray-100 dark:border-gray-800">
          <img
            transition:name={post.image}
            src={getImageSrc(post.image, "post-image-main")}
            alt={post.title}
            width={600}
            height={600}
            class="w-full"
          />
          <div class="my-10 flex flex-col gap-4">
            {meta.map((i) => (
              <Meta {...i} />
            ))}
          </div>
          {next && (
            <>
              <h5>Next</h5>
              <PostList grid={1} vertical={false} posts={[next]} />
            </>
          )}
        </Section>
      )
    }
    <Section class="col-span-8">
      <Markdown children={post.content} />
    </Section>
  </Container>
</MainLayout>
