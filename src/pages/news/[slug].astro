---
import Section from "../../components/ui/Section.astro";
export const prerender = true;
import { PUBLIC_DIRECTUS_URL } from "astro:env/client";

import Container from "@ui/Container.astro";
import PageHeader from "@ui/PageHeader.astro";
import Markdown from "@ui/Markdown.astro";
import MainLayout from "@layouts/MainLayout.astro";

import { createDirectusClient } from "@lib/directus";
import { readItems } from "@directus/sdk";
import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import SectionHeader from "../../components/ui/SectionHeader.astro";
import PostList from "../../components/ui/PostList.astro";
import { getImageSrc } from "../../lib/utils";

export async function getStaticPaths() {
  const directus = createDirectusClient();
  const posts = await directus.request(
    readItems("posts", {
      fields: ["slug", "date", "type", "title", "content", "topics", "image"],
    }),
  );

  return posts.map((post: { slug: string }, index, arr) => ({
    params: { slug: post.slug },
    props: { post, next: arr[index + 1], prev: arr[index - 1] },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { slug } = Astro.params as Params;
const { post, next, prev } = Astro.props as Props;
---

<MainLayout>
  <PageHeader
    title={post.title}
    breadcrumbs={[
      { label: "Home", href: "/" },
      { label: "News", href: "/news" },
      {
        label: "Post",
        href: `/news/${slug}`,
        active: true,
      },
    ]}
    meta={[{ label: "Published", value: new Date(post.date).toDateString() }]}
  />

  {
    post.image && (
      <Container>
        <img
          transition:name={post.image}
          src={getImageSrc(post.image, "post-image-main")}
          alt={post.title}
          width={600}
          height={600}
          class="lg:float-right lg:p-10 lg:-mt-20 mx-auto"
        />
      </Container>
    )
  }

  <Container classes="my-10">
    <Markdown children={post.content} />
  </Container>

  {
    post.topics && (
      <Container>
        <h5>Topics</h5>
        <ul class="list-none my-10 p-0 m-0 flex gap-2">
          {post.topics?.map((topic: string) => (
            <li>
              <a class="nc-tag nc-link nc-focus">{topic}</a>
            </li>
          ))}
        </ul>
      </Container>
    )
  }

  <Container>
    <hr />
    <Section class="flex flex-col max-w-1/3">
      {
        next && (
          <>
            <h4>Next</h4>
            <PostList grid={1} vertical={false} posts={[next]} />
          </>
        )
      }
    </Section>
    <Section />
  </Container>
</MainLayout>
